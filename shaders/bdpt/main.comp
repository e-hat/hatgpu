#version 460 core

layout(local_size_x = 1, local_size_y = 1) in;

layout (set = 0, binding = 0, rgba8) uniform image2D canvasImage;

layout (std140, set = 0, binding = 1) uniform RayGenConstants {
  vec3 origin;
  vec3 horizontal;
  vec3 vertical;
  vec3 lowerLeftCorner;
  
  uvec2 viewportExtent;
} rayGenConstants;

struct Ray {
  vec3 origin;
  vec3 dir;
};

vec3 rayAt(Ray r, float t) {
  return r.origin + t * r.dir;
}

float hitSphere(vec3 center, float radius, Ray r) {
  vec3 oc = r.origin - center;
  float a = dot(r.dir, r.dir);
  float b = 2.0 * dot(oc, r.dir);
  float c = dot(oc, oc) - radius*radius;
  float discriminant = b*b - 4*a*c;
  if (discriminant < 0) {
    return -1.0;
  } else {
    return (-b - sqrt(discriminant)) / (2.0 * a);
  }
}

vec3 rayColor(Ray r) {
  float t = hitSphere(vec3(0, 0, -1), 0.5, r);
  if (t > 0.0) {
    vec3 N = normalize(rayAt(r, t) - vec3(0, 0, -1));
    return 0.5 * (N + vec3(1));
  }
  vec3 unitDir = normalize(r.dir);
  t = 0.5 * (unitDir.y + 1.0);
  return mix(vec3(1.0), vec3(0.5, 0.7, 1.0), t);
}

void main() {
  uint row = rayGenConstants.viewportExtent.y - gl_GlobalInvocationID.y - 1;
  uint col = gl_GlobalInvocationID.x;

  float u = float(col) / (rayGenConstants.viewportExtent.x - 1);
  float v = float(row) / (rayGenConstants.viewportExtent.y - 1);

  Ray r = Ray(rayGenConstants.origin.xyz, rayGenConstants.lowerLeftCorner.xyz + u * rayGenConstants.horizontal.xyz + v * rayGenConstants.vertical.xyz);
  vec3 outColor = rayColor(r);

  imageStore(canvasImage, ivec2(gl_GlobalInvocationID.xy), vec4(outColor.bgr, 1.0));
}
